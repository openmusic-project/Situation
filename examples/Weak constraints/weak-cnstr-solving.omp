; OM File Header - Saved 2010/11/16 19:27:30
; (6.030006 :patc (om-make-point 114 75) (om-make-point 50 50) (om-make-point 845 602) "No documentation " 183 0 nil "2010/11/16 19:27:30")
; End File Header
(in-package :om)(load-lib-for (quote ("Situation")))(setf *om-current-persistent* (om-load-patch1 "weak-cnstr-solving" (quote ((om-load-boxcall (quote genfun) "WBEST-SO-FAR" (quote wbest-so-far) (quote nil) (om-make-point 623 341) nil nil nil nil 1) (om-load-boxcall (quote genfun) "WPREV-INSTANCES" (quote wprev-instances) (quote nil) (om-make-point 432 340) nil nil nil "wprev-instances" 1) (om-load-boxcomment "comment" (om-make-point 243 130) (quote "See that a \"start\" value of 2 is given in p-pts entry of Wsolver. This means that the constraint engine should assume that at least a solution of cost equal to 2 exists. This kind of information is very important to improve efficiency. If no \"max\" value is given in p-pts, solutions will be tried in decreasing order, starting probably with one that violates all constraints!") "" (om-make-point 132 314) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 250 92) (quote "constraint i-dst_filt has importance equal to 3. A solution of cost equal to 1 is accepted (see p-pts entry in Wsolver). So the solution cannot violate that constraint but it could violate some other constraint of importance equal to 1") "" (om-make-point 136 199) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 96 59) (quote "examples of weak constraints") "" (om-make-point 339 17) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "I-DST_RNW" (quote i-dst_rnw) (quote ((om-load-inputfun (quote input-funbox) "expression" "EXP" (list (list 4 2))))) (om-make-point 677 54) nil nil nil nil 1) (om-load-boxcall (quote genfun) "I/I-DST_FILT" (quote i/i-dst_filt) (quote ((om-load-inputfun (quote input-funbox) "expression" "EXP" (list (list 0 (quote u) (list (quote not) (list (quote or) (list 2 2 2) (list 3 3) (list 4 4) (list 5 5) (list 7 7)))))) (om-load-inputfun (quote input-funbox) "variable Map" "C-IMP" 1))) (om-make-point 608 40) nil nil nil nil 1) (om-load-boxcall (quote genfun) "I-DST_FILT1" (quote i-dst_filt) (quote ((om-load-inputfun (quote input-funbox) "logical expression" "EXP" (list (quote not) (list (quote or) (list (quote ints) 12 (quote t)) (list (quote *) 6 (quote *)) (list (quote *) 2 2 2 (quote *)) (list (quote *) 3 3 (quote *)) (list (quote *) 4 4 (quote *)) (list (quote *) 5 5 (quote *)) (list (quote *) 7 7 (quote *)) (list (quote *) 3 4 (quote *)) (list (quote *) 4 3 (quote *)) (list (quote *) 3 2 3 (quote *)) (list (quote *) 2 2 3 (quote *))))) (om-load-inputfun (quote input-funbox) "constraint importance" "C-IMP" 1))) (om-make-point 549 24) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X/X_PROF1" (quote x/x_prof) (quote ((om-load-inputfun (quote input-funbox) "expression" "EXP" (list (quote |0_27|) (list 0 (quote u) (list (quote max) 3)) (quote |28_38|) (list 0 (quote u) (list (quote max) 4)) (quote |39_74|) (list 0 (quote u) (list (quote max) 5)))) (om-load-inputfun (quote input-funbox) "constr importance" "C-IMP" 1))) (om-make-point 519 68) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X_PROF1" (quote x_prof) (quote ((om-load-inputfun (quote input-funbox) "expression" "EXP" (list (quote |0_27|) (list (quote max) 3) (quote |28_38|) (list (quote max) 4) (quote |39_74|) (list (quote max) 5))) (om-load-inputfun (quote input-funbox) "cnstr importance" "C-IMP" 1))) (om-make-point 477 81) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PTS_FILT" (quote pts_filt) (quote ((om-load-inputfun (quote input-funbox) "expression" "EXP" (list 0 (list 65 67 70 72) 34 (list 61 (quote *)) 74 (list (quote ?) (quote ?) 70 72))) (om-load-inputfun (quote input-funbox) "cnstr importance" "C-IMP" 1))) (om-make-point 426 102) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-PTS_RNW1" (quote x-pts_rnw) (quote ((om-load-inputfun (quote input-funbox) "expression" "EXP" (list (quote u) (list 5 0 (quote t)))) (om-load-inputfun (quote input-funbox) "cnstr importance" "C-IMP" 1))) (om-make-point 352 111) nil nil nil nil 1) (om-load-boxcall (quote genfun) "CH-SOL" (quote ch-sol) (quote ((om-load-inputfun (quote input-funbox) "solution" "LS" nil))) (om-make-point 55 346) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 29 461) (om-make-point 180 85) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7300 8400 8800 9200) (6600 7700 8100 8500) (6000 6700 7400 7800) (6300 7400 7800 8200) (7000 8100 8500 8900) (7000 7700 8100 8500) (6300 7000 7700 8100) (6600 7700 8400 8800) (6600 7300 8000 8400) (5900 6600 7300 7700) (7300 8000 8400 8800) (7100 7800 8500 9200) (6400 7100 7800 8500) (6000 6700 7400 8100) (5300 6000 6700 7400) (5500 6200 6600 7000) (6200 6900 7300 7700) (4500 5800 6700 7300) (4700 5800 6900 8000) (4100 5800 6700 7600) (3900 5800 7200 8300) (3800 5900 8000) (3400 5700 7500) (3300 5800 7800))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000)) :ldur (quote ((1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000))) :lvel (quote ((100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100 100) (100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1 1) (1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player show-stems obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos microplay scale)) (list (quote :midishare) (quote t) 0 0 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 nil nil)) t nil nil nil) (om-load-boxcall (quote genfun) "X-PTS_RNW" (quote x-pts_rnw) (quote ((om-load-inputfun (quote input-funbox) "expression" "EXP" (list (quote |0_89|) (list (quote u) (list 3 (quote max) 0)))) (om-load-inputfun (quote input-funbox) "cnstr importance" "C-IMP" 1))) (om-make-point 155 119) nil nil nil nil 1) (om-load-boxcall (quote genfun) "I-DST_FILT" (quote i-dst_filt) (quote ((om-load-inputfun (quote input-funbox) "logical expression" "EXP" (list (quote |0_89|) (list (quote not) (list (quote ints) 12 (quote t))))) (om-load-inputfun (quote input-funbox) "constraint importance" "C-IMP" 3))) (om-make-point 103 82) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X_PROF" (quote x_prof) (quote ((om-load-inputfun (quote input-funbox) "expression" "EXP" (list (quote |0_89|) (list (quote max) 4))) (om-load-inputfun (quote input-funbox) "cnstr importance" "C-IMP" 1))) (om-make-point 60 84) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X/X_PROF" (quote x/x_prof) (quote ((om-load-inputfun (quote input-funbox) "expression" "EXP" (list (quote |0_89|) (list (quote max) 4))) (om-load-inputfun (quote input-funbox) "constr importance" "C-IMP" 1))) (om-make-point 6 109) nil nil nil nil 1) (om-load-boxcall (quote genfun) "WSOLVER" (quote wsolver) (quote ((om-load-inputfun (quote input-funbox) "number of chords" "N-CH" 70) (om-load-inputfun (quote input-funbox) "Ambitus" "AMB" (list (quote start) 3 (quote accept) 1 (quote |0_34|) (list (quote interp) (list 54 77) (list 61 77)) (quote |35_49|) (list (quote interp) (list 61 77) (list 54 70)) (quote |50_73|) (list (quote interp) (list 54 70) (list 54 72)))) (om-load-inputfun (quote input-funbox) "densities" "DENS" (list 4)) (om-load-inputfun (quote input-funbox) "vertical intervals" "VINT" (list (quote |0_37|) (list (quote interp) (list 2 3 4 5) (list 2 4 5 7)) (quote |38_73|) (list (quote interp) (list 2 4 5 7) (list 2 3 4 5)))) (om-load-inputfun (quote input-funbox) "Constraints" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "horizontal intervals" "HINT" (list (quote |0_10|) (list (quote |1_3|)) (quote |11_26|) (list (quote |1_4|)) (quote |27_47|) (list (quote |1_5|)) (quote |48_63|) (list (quote |1_4|)) (quote |64_73|) (list (quote |1_3|)))))) (om-make-point 614 232) nil nil nil nil 1) (om-load-boxcall (quote genfun) "CSOLVER" (quote csolver) (quote ((om-load-inputfun (quote input-funbox) "number of chords" "N-CH" 21) (om-load-inputfun (quote input-funbox) "Ambitus" "AMB" (list (quote |0_34|) (list (quote interp) (list 54 77) (list 61 77)) (quote |35_49|) (list (quote interp) (list 61 77) (list 54 70)) (quote |50_73|) (list (quote interp) (list 54 70) (list 54 72)))) (om-load-inputfun (quote input-funbox) "densities" "DENS" (list 4)) (om-load-inputfun (quote input-funbox) "vertical intervals" "VINT" (list (quote |0_37|) (list (quote interp) (list 2 3 4 5) (list 2 4 5 7)) (quote |38_73|) (list (quote interp) (list 2 4 5 7) (list 2 3 4 5)))) (om-load-inputfun (quote input-funbox) "Constraints" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "horizontal intervals" "HINT" (list (quote |0_10|) (list (quote |1_3|)) (quote |11_26|) (list (quote |1_4|)) (quote |27_47|) (list (quote |1_5|)) (quote |48_63|) (list (quote |1_4|)) (quote |64_73|) (list (quote |1_3|)))))) (om-make-point 501 232) (om-make-point 48 53) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 492 178) (om-make-point 185 42) nil nil nil 1) (om-load-boxcall (quote genfun) "WSOLVER" (quote wsolver) (quote ((om-load-inputfun (quote input-funbox) "number of chords" "N-CH" 24) (om-load-inputfun (quote input-funbox) "Ambitus" "AMB" (list (quote start) 2 (quote accept) 1 (quote |0_40|) (list (quote interp) (list 62 86) (list 12 116)) (quote |41_79|) (list (quote interp) (list 12 116) (list 10 36)))) (om-load-inputfun (quote input-funbox) "densities" "DENS" (list (quote |0_40|) (list (quote interp) (list 4 5) (list 3 3)) (quote |41_79|) (list (quote interp) (list 3 3) (list 4 5)))) (om-load-inputfun (quote input-funbox) "vertical intervals" "VINT" (list (quote |0_15|) (list 4 7 11) (quote |16_40|) (list (quote interp) (list 4 7 11) (list 47 51 58)) (quote |41_65|) (list (quote interp) (list 47 51 58) (list 4 7 11)) (quote |66_89|) (list 4 7 11))) (om-load-inputfun (quote input-funbox) "Constraints" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "horizontal intervals" "HINT" (list (quote |0_20|) (list 4 7 11) (quote |20_50|) (list 2 3 5) (quote |50_90|) (list 4 7 11))))) (om-make-point 60 269) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 79 191) (om-make-point 32 37) nil nil nil 1) (om-load-boxcall (quote genfun) "CSOLVER" (quote csolver) (quote ((om-load-inputfun (quote input-funbox) "number of chords" "N-CH" 24) (om-load-inputfun (quote input-funbox) "Ambitus" "AMB" (list (quote |0_40|) (list (quote interp) (list 62 86) (list 12 116)) (quote |41_79|) (list (quote interp) (list 12 116) (list 10 36)))) (om-load-inputfun (quote input-funbox) "densities" "DENS" (list (quote |0_40|) (list (quote interp) (list 4 5) (list 3 3)) (quote |41_79|) (list (quote interp) (list 3 3) (list 4 5)))) (om-load-inputfun (quote input-funbox) "vertical intervals" "VINT" (list (quote |0_15|) (list 4 7 11) (quote |16_40|) (list (quote interp) (list 4 7 11) (list 47 51 58)) (quote |41_65|) (list (quote interp) (list 47 51 58) (list 4 7 11)) (quote |66_89|) (list 4 7 11))) (om-load-inputfun (quote input-funbox) "Constraints" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "horizontal intervals" "HINT" (list (quote |0_20|) (list 4 7 11) (quote |20_50|) (list 2 3 5) (quote |50_90|) (list 4 7 11))))) (om-make-point 8 211) (om-make-point 48 53) nil nil "csolver" 1))) (quote ((21 0 12 0 nil 0) (12 0 13 1 nil 0) (20 0 18 4 nil 0) (20 0 19 4 nil 0) (11 0 20 0 nil 0) (10 0 20 1 nil 0) (9 0 20 2 nil 0) (8 0 20 3 nil 0) (7 0 20 4 nil 0) (6 0 20 5 nil 0) (5 0 20 6 nil 0) (22 0 21 4 nil 0) (17 0 22 0 nil 0) (16 0 22 1 nil 0) (15 0 22 2 nil 0) (14 0 22 3 nil 0) (22 0 23 4 nil 0))) nil 6.030006))
