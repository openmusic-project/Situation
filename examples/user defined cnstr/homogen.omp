; OM File Header - Saved 2010/11/16 19:27:30
; (6.030006 :patc (om-make-point 69 53) (om-make-point 50 50) (om-make-point 498 502) "No documentation " 183 0 nil "2010/11/16 19:27:30")
; End File Header
(in-package :om)(load-lib-for (quote ("Situation")))(setf *om-current-persistent* (om-load-patch1 "homogen" (quote ((om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 148 210) (om-make-point 41 37) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "first input" "SELF" 0) (om-load-inputfun (quote input-funbox) "second input" "NUM" 0))) (om-make-point 236 228) (om-make-point 24 27) nil nil nil 1) (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote min)) (om-load-inputfun (quote input-funbox) "FIRST-ARG" "FIRST-ARG" nil))) (om-make-point 264 182) (om-make-point 35 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "APPLY" (quote apply) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote max)) (om-load-inputfun (quote input-funbox) "FIRST-ARG" "FIRST-ARG" nil))) (om-make-point 198 191) (om-make-point 35 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "X->DX" (quote common-lisp-user::x->dx) (quote ((om-load-inputfun (quote input-funbox) "XS" "XS" nil))) (om-make-point 246 132) (om-make-point 35 37) nil nil nil 1) (om-load-boxcall (quote lispfun) ">" (quote >) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 191 266) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 97 213) (om-make-point 35 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "<=" (quote <=) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 138 254) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote genfun) "OMAND" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "add patch" "add patch" nil))) (om-make-point 169 302) (om-make-point 24 35) nil nil nil 1) (om-load-boxcall (quote lispfun) "NTH" (quote nth) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 75 172) (om-make-point 24 37) nil nil nil 1) (om-load-boxin "input2" 2 (om-make-point 245 66) "no documentation" nil nil nil) (om-load-boxin "input1" 1 (om-make-point 45 51) "no documentation" nil nil nil) (om-load-boxin "input" 0 (om-make-point 165 72) "no documentation" nil nil nil) (om-load-boxout "output" 0 (om-make-point 159 363) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (quote ((9 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0) (4 0 2 1 nil 0) (4 0 3 1 nil 0) (10 0 4 0 nil 0) (0 0 5 0 nil 0) (1 0 5 1 nil 0) (9 0 6 0 nil 0) (6 0 7 0 nil 0) (1 0 7 1 nil 0) (7 0 8 0 nil 0) (5 0 8 1 nil 0) (11 0 9 0 nil 0) (12 0 9 1 nil 0) (8 0 13 0 nil 0))) 6.030006 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input2" nil))) (om-make-point 194 68) nil nil "l" "hom-cnstr") (om-load-editor-box1 "VOICE" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 -2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))) (om-load-inputfun (quote input-funbox) "CHORDS" "CHORDS" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "TEMPO" "TEMPO" 60) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 62 336) (om-make-point 237 125) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1/2 (((2 4) ((1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (4400 5700 6200 6500)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5200 6100 6400 6700)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (2600 4100 5600 6500)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (3700 5000 5700 6400)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800 5700 6200 6500)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600 6300 6600)) :ldur (quote (250 250 250)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700 6400 6700)) :ldur (quote (250 250 250)) :lvel (quote (100 100 100)) :loffset (quote (0 0 0)) :lchan (quote (1 1 1))))) (load-port-info thechord (quote (0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400 5900 6200 6500)) :ldur (quote (250 250 250 250)) :lvel (quote (100 100 100 100)) :loffset (quote (0 0 0 0)) :lchan (quote (1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player deltapict approx fontsize staff cmnpref outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode show-stems microplay scale)) (list (quote :midishare) (om-make-point 0 0) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 1 nil 1000 0 18350450 2621450 0 0 (quote t) nil nil)) t nil nil nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 7 135) (om-make-point 156 45) (list (quote ?) (list (list (quote |2//4|) (list (list 1 (list 1 1 1 1)) (list 1 (list 1 1 1 1)))))) "(? ((2//4 ((1 (1 1 1 1)) $(1 (1 1 1 1))))))" nil) (om-load-boxcall (quote genfun) "CH-SOL" (quote ch-sol) (quote ((om-load-inputfun (quote input-funbox) "solution" "LS" nil))) (om-make-point 257 257) (om-make-point 41 45) nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 99 16) (om-make-point 272 28) (list (list 7 11) (list 6 10) (list 5 9) (list 4 8) (list 3 7) (list 3 6) (list 2 5) (list 2 4)) "((7 11) (6 10) (5 9) (4 8) (3 7) (3 6) (2 5) (2 4))" nil) (om-load-boxcall (quote genfun) "USER-CNSTR" (quote user-cnstr) (quote ((om-load-inputfun (quote input-funbox) "constraint predicate" "CONST" nil) (om-load-inputfun (quote input-funbox) "chord indexes expression" "EXP" (list (quote |0_8|) (list (quote s) (quote i)))))) (om-make-point 226 147) (om-make-point 65 53) nil nil nil 1) (om-load-boxcall (quote genfun) "CSOLVER" (quote csolver) (quote ((om-load-inputfun (quote input-funbox) "number of chords" "N-CH" 8) (om-load-inputfun (quote input-funbox) "Ambitus" "AMB" (list (quote |24_72|))) (om-load-inputfun (quote input-funbox) "densities" "DENS" (list (quote |2_4|))) (om-load-inputfun (quote input-funbox) "vertical intervals" "VINT" (list 3 5 7 9 13 15)) (om-load-inputfun (quote input-funbox) "Constraints" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "horizontal intervals" "HINT" (list 1 2)))) (om-make-point 158 202) (om-make-point 48 53) nil nil nil 1))) (quote ((4 0 0 0 nil 0) (2 0 1 1 nil 0) (3 0 1 2 nil 0) (6 0 3 0 nil 0) (0 0 5 0 nil 0) (5 0 6 4 nil 0))) nil 6.030006))
