; OM File Header - Saved 2010/11/16 19:27:30
; (6.030006 :patc (om-make-point 66 57) (om-make-point 50 50) (om-make-point 840 573) "No documentation " 183 0 nil "2010/11/16 19:27:30")
; End File Header
(in-package :om)(load-lib-for (quote ("Situation")))(setf *om-current-persistent* (om-load-patch1 "examples" (quote ((om-load-boxcall (quote abstraction) "mypatch2" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxin "input3" 3 (om-make-point 342 24) "no documentation" nil nil nil) (om-load-boxin "input2" 2 (om-make-point 248 22) "no documentation" nil nil nil) (om-load-boxin "input1" 1 (om-make-point 55 45) "no documentation" nil nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "no documentation" nil nil nil) (om-load-boxout "output" 0 (om-make-point 263 327) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "OMAND" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "add patch" "add patch" nil))) (om-make-point 285 281) (om-make-point 24 35) nil nil nil 1) (om-load-boxcall (quote lispfun) "/=" (quote /=) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 126 242) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "ABS" (quote abs) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil))) (om-make-point 240 185) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "ABS" (quote abs) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil))) (om-make-point 64 196) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 258 136) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 56 138) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "/=" (quote /=) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 338 108) (om-make-point 24 37) nil nil nil 1))) (quote ((5 0 4 0 nil 0) (6 0 5 0 nil 0) (11 0 5 1 nil 0) (8 0 6 0 nil 0) (7 0 6 1 nil 0) (9 0 7 0 nil 0) (10 0 8 0 nil 0) (1 0 9 0 nil 0) (0 0 9 1 nil 0) (3 0 10 0 nil 0) (2 0 10 1 nil 0) (1 0 11 0 nil 0) (0 0 11 1 nil 0))) 6.030006 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input2" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input3" nil))) (om-make-point 177 72) nil nil "l" nil) (om-load-boxcall (quote abstraction) "mypatch1" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 332 172) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 331 118) (om-make-point 41 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "BUTLAST" (quote butlast) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 294 211) (om-make-point 47 37) nil nil nil 1) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 100))) (om-make-point 302 75) (om-make-point 24 35) nil nil nil 1) (om-load-boxcall (quote genfun) "CH-SOL" (quote ch-sol) (quote ((om-load-inputfun (quote input-funbox) "solution" "LS" nil))) (om-make-point 299 20) (om-make-point 41 45) nil nil nil 1) (om-load-boxcall (quote lispfun) "1-1" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil))) (om-make-point 106 250) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 241 295) (om-make-point 35 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "FLAT-ONCE" (quote common-lisp-user::flat-once) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 307 275) (om-make-point 59 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil))) (om-make-point 424 389) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 0) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 84 301) (om-make-point 65 53) nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input2" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input3" nil))) (om-make-point 196 433) (om-make-point 32 53) nil nil (list (om-load-boxcall (quote lispfun) "-1" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 340 204) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" nil))) (om-make-point 161 137) (om-make-point 53 53) nil nil nil 1) (om-load-boxcall (quote lispfun) "NOT" (quote not) (quote ((om-load-inputfun (quote input-funbox) "OBJECT" "OBJECT" nil))) (om-make-point 239 435) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "MEMBER" (quote member) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 160 424) (om-make-point 41 37) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 116 358) (om-make-point 47 53) nil nil nil 3) (om-load-boxcall (quote genfun) "OMAND" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "add patch" "add patch" nil))) (om-make-point 85 316) (om-make-point 24 35) nil nil nil 1) (om-load-boxcall (quote lispfun) "<=1" (quote <=) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 223 300) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "-1" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 185 252) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 274 181) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "<=" (quote <=) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 54 277) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "LIST" nil))) (om-make-point 8 141) (om-make-point 53 53) nil nil nil 1) (om-load-boxin "input3" 3 (om-make-point 245 35) "no documentation" nil nil nil) (om-load-boxcall (quote lispfun) "COUNT1" (quote count) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 79 185) (om-make-point 35 37) nil nil nil 1) (om-load-boxin "input2" 2 (om-make-point 81 38) "no documentation" nil nil nil) (om-load-boxin "input1" 1 (om-make-point 346 30) "no documentation" nil nil nil) (om-load-boxin "input0" 0 (om-make-point 3 30) "no documentation" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 375 438) (om-make-point 47 53) nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 32 442) (om-make-point 53 53) nil nil 0) (om-load-boxcall (quote lispfun) "REST" (quote rest) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 168 49) (om-make-point 29 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST1" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 447 152) (om-make-point 35 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "COUNT1" (quote count) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 382 137) (om-make-point 35 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "<=" (quote <=) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 314 252) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "<=1" (quote <=) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 436 240) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote genfun) "OMAND" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "add patch" "add patch" nil) (om-load-inputfun (quote input-funbox) "add patch" "add patch" nil))) (om-make-point 293 357) (om-make-point 24 35) nil nil nil 1)) (quote ((19 0 0 0 nil 0) (20 0 0 1 nil 0) (18 0 1 0 nil 0) (3 0 2 0 nil 0) (4 1 3 1 nil 0) (5 0 4 0 nil 0) (9 0 5 0 nil 0) (6 0 5 1 nil 0) (7 0 6 0 nil 0) (8 0 6 1 nil 0) (1 0 7 0 nil 0) (12 0 7 1 nil 0) (11 0 8 0 nil 0) (14 0 8 1 nil 0) (12 0 9 0 nil 0) (1 0 9 1 nil 0) (15 0 10 0 nil 0) (10 0 12 0 nil 0) (13 0 12 1 nil 0) (23 0 16 0 nil 0) (4 0 17 0 nil 0) (13 0 18 0 nil 0) (13 0 19 0 nil 0) (14 0 20 0 nil 0) (13 0 20 1 nil 0) (0 0 21 0 nil 0) (8 0 21 1 nil 0) (20 0 22 0 nil 0) (19 0 22 1 nil 0) (2 0 23 0 nil 0) (21 0 23 1 nil 0) (22 0 23 2 nil 0))) 1 "omloop" nil) (om-load-boxcall (quote lispfun) "CONS" (quote cons) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "LIST-OR-THING" "LIST-OR-THING" nil))) (om-make-point 250 348) (om-make-point 29 37) nil nil nil 1) (om-load-boxcall (quote genfun) "PREV-INSTANCES" (quote prev-instances) (quote nil) (om-make-point 113 13) (om-make-point 89 53) nil nil "prev-instances" 1) (om-load-boxin "input2" 2 (om-make-point 216 166) "no documentation" nil nil nil) (om-load-boxin "input1" 1 (om-make-point 130 115) "no documentation" nil nil nil) (om-load-boxin "input" 0 (om-make-point 420 110) "no documentation" nil nil nil) (om-load-boxout "output" 0 (om-make-point 189 495) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (quote ((1 0 0 0 nil 0) (14 0 0 1 nil 0) (3 0 1 0 nil 0) (3 0 2 0 nil 0) (0 0 2 1 nil 0) (4 0 3 0 nil 0) (12 0 4 0 nil 0) (14 0 5 0 nil 0) (13 0 6 0 nil 0) (2 0 7 0 nil 0) (15 0 8 0 nil 0) (5 0 9 1 nil 0) (9 0 10 0 nil 0) (14 0 10 1 nil 0) (11 0 10 2 nil 0) (8 0 10 3 nil 0) (6 0 11 0 nil 0) (7 0 11 1 nil 0) (10 0 16 0 nil 0))) 6.030006 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input2" nil))) (om-make-point 544 101) nil nil "l" "magic-constraint") (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 336 109) (om-make-point 35 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 196 126) (om-make-point 35 37) nil nil nil 1) (om-load-boxcall (quote genfun) "OMAND" (quote omand) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" nil) (om-load-inputfun (quote input-funbox) "add patch" "add patch" nil))) (om-make-point 294 326) (om-make-point 24 35) nil nil nil 1) (om-load-boxcall (quote lispfun) "/=" (quote /=) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 135 287) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "ABS" (quote abs) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil))) (om-make-point 249 230) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "ABS" (quote abs) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil))) (om-make-point 73 241) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 257 180) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 65 183) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "/=" (quote /=) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 333 187) (om-make-point 24 37) nil nil nil 1) (om-load-boxin "input3" 3 (om-make-point 334 32) "no documentation" nil nil nil) (om-load-boxin "input2" 2 (om-make-point 105 45) "no documentation" nil nil nil) (om-load-boxin "input1" 1 (om-make-point 55 45) "no documentation" nil nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "no documentation" nil nil nil) (om-load-boxout "output" 0 (om-make-point 283 373) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (quote ((9 0 0 0 nil 0) (10 0 1 0 nil 0) (3 0 2 0 nil 0) (8 0 2 1 nil 0) (5 0 3 0 nil 0) (4 0 3 1 nil 0) (6 0 4 0 nil 0) (7 0 5 0 nil 0) (1 0 6 0 nil 0) (0 0 6 1 nil 0) (12 0 7 0 nil 0) (11 0 7 1 nil 0) (1 0 8 0 nil 0) (0 0 8 1 nil 0) (2 0 13 0 nil 0))) 6.030006 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input2" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input3" nil))) (om-make-point 2 100) nil nil "l" "queen-constraint") (om-load-boxcall (quote genfun) "CSOLVER" (quote csolver) (quote ((om-load-inputfun (quote input-funbox) "number of objects" "N-OBJ" 12) (om-load-inputfun (quote input-funbox) "possible points" "P-PTS" nil) (om-load-inputfun (quote input-funbox) "number of points" "N-PTS" 1) (om-load-inputfun (quote input-funbox) "internal distances" "I-DST" nil) (om-load-inputfun (quote input-funbox) "Constraints" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "external distances" "X-DST" nil))) (om-make-point 463 290) nil nil nil nil 1) (om-load-boxcall (quote genfun) "CSOLVER" (quote csolver) (quote ((om-load-inputfun (quote input-funbox) "number of objects" "N-OBJ" 12) (om-load-inputfun (quote input-funbox) "possible points" "P-PTS" nil) (om-load-inputfun (quote input-funbox) "number of points" "N-PTS" nil) (om-load-inputfun (quote input-funbox) "internal distances" "I-DST" nil) (om-load-inputfun (quote input-funbox) "Constraints" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "external distances" "X-DST" nil) (om-load-inputfun (quote input-funbox) "Fixed objects data base" "DATA" nil))) (om-make-point 231 306) nil nil nil nil 1) (om-load-boxcall (quote genfun) "CSOLVER" (quote csolver) (quote ((om-load-inputfun (quote input-funbox) "number of objects" "N-OBJ" 12) (om-load-inputfun (quote input-funbox) "possible points" "P-PTS" (list (quote |0_11|))) (om-load-inputfun (quote input-funbox) "number of points" "N-PTS" 1) (om-load-inputfun (quote input-funbox) "internal distances" "I-DST" nil) (om-load-inputfun (quote input-funbox) "Constraints" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "external distances" "X-DST" (list 2 3 4 5 6 7 8 9 10)))) (om-make-point 37 260) nil nil nil nil 1) (om-load-boxcall (quote genfun) "EXPAND-LST" (quote expand-lst) (quote ((om-load-inputfun (quote input-funbox) "the list to expand" "LIST" (list (quote 3*) (list 2 4) (quote |0_8|))))) (om-make-point 359 164) (om-make-point 65 53) nil nil nil 1) (om-load-boxcall (quote genfun) "ARITHM-SER1" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 487 194) (om-make-point 65 53) nil nil nil 1) (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (list (list (quote s) (quote i)))))) (om-make-point 658 169) (om-make-point 41 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "1-" (quote 1-) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil))) (om-make-point 676 36) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 649 104) (om-make-point 65 53) nil nil nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 468 386) (om-make-point 41 37) nil nil nil 1) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 383 304) (om-make-point 26 28) nil "nil" nil) (om-load-boxcall (quote lispfun) "REMOVE" (quote remove) (quote ((om-load-inputfun (quote input-funbox) "ITEM" "ITEM" nil) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 392 332) (om-make-point 41 37) nil "l" nil 1) (om-load-boxcomment "comment" (om-make-point 217 80) (quote "Magic sequence$If the element in the i-th position of the sequence is equal to X, then there are exactly X occurrences of i in the sequence$") "" (om-make-point 540 362) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "USER-CNSTR" (quote user-cnstr) (quote ((om-load-inputfun (quote input-funbox) "constraint predicate" "CONST" nil) (om-load-inputfun (quote input-funbox) "chord indexes expression" "EXP" (list (quote |0_4|) (list (quote s) (quote i)))))) (om-make-point 585 214) (om-make-point 65 53) nil nil nil 1) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 434 13) (om-make-point 20 28) 7 "7" nil) (om-load-boxcomment "comment" (om-make-point 58 39) (quote "n-queens standard$") "" (om-make-point 256 365) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 146 49) (quote "n-queens interpreting base notes as queen positions$") "" (om-make-point 9 331) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 280 152) (om-make-point 37 28) (list (quote a) (quote i)) "(a i)" nil) (om-load-boxcall (quote lispfun) "GENERIC-CNSTR1" (quote generic-cnstr) (quote ((om-load-inputfun (quote input-funbox) "CNSTR" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "VAR-INDS" "VAR-INDS" nil) (om-load-inputfun (quote input-funbox) "OPTION" "OPTION" (list (quote a) (quote i))))) (om-make-point 205 180) (om-make-point 83 37) nil nil "generic-cnstr" 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 238 126) (om-make-point 48 28) (list (quote |0_11|)) "(0_11)" nil) (om-load-boxcall (quote genfun) "USER-CNSTR" (quote user-cnstr) (quote ((om-load-inputfun (quote input-funbox) "constraint predicate" "CONST" nil) (om-load-inputfun (quote input-funbox) "chord indexes expression" "EXP" (list (quote |0_11|) (list (quote a) (quote i)))))) (om-make-point 40 188) (om-make-point 65 53) nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 347 128) (om-make-point 90 28) (list (quote 12*) (list (list (quote |0_11|)))) "(12* ((0_11)))" nil) (om-load-boxcall (quote genfun) "VARIABLE-DOMAINS" (quote variable-domains) (quote ((om-load-inputfun (quote input-funbox) "list of values in each variable domain" "DOMAINS" (list (list 1 2) (list 3 4))))) (om-make-point 284 221) (om-make-point 101 45) nil nil "variable-domains" 1))) (quote ((16 0 1 0 nil 0) (16 0 3 0 nil 0) (7 0 3 1 nil 0) (15 0 3 4 nil 0) (20 0 4 4 nil 0) (24 0 4 6 nil 0) (22 0 5 4 nil 0) (23 0 6 0 nil 0) (16 0 7 1 nil 0) (10 0 8 0 nil 0) (16 0 9 0 nil 0) (9 0 10 1 nil 0) (13 0 11 0 nil 0) (3 0 11 1 nil 0) (12 0 13 0 nil 0) (1 0 15 0 nil 0) (8 0 15 1 nil 0) (0 0 20 0 nil 0) (21 0 20 1 nil 0) (19 0 20 2 nil 0) (2 0 22 0 nil 0) (6 0 24 0 nil 0))) nil 6.030006))
