; OM File Header - Saved 2010/11/16 19:27:30
; (6.030006 :patc (om-make-point 95 57) (om-make-point 50 50) (om-make-point 732 613) "No documentation " 183 0 nil "2010/11/16 19:27:30")
; End File Header
(in-package :om)(load-lib-for (quote ("Situation")))(setf *om-current-persistent* (om-load-patch1 "filtering chord DB" (quote ((om-load-boxcall (quote genfun) "GET-CHORDS" (quote get-chords) (quote ((om-load-inputfun (quote input-funbox) "a music sequence" "SELF" (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 (1 (1 -2 1 1)) 1 1)) ((4 4) (1 (1 (1 2 1 1)) -1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)))) (om-make-point 574 118) nil nil nil nil 1) (om-load-boxcall (quote genfun) "USER-CNSTR" (quote user-cnstr) (quote ((om-load-inputfun (quote input-funbox) "constraint predicate" "CONST" nil) (om-load-inputfun (quote input-funbox) "chord indexes expression" "EXP" (list (quote |0_20|) (list (quote s)))) (om-load-inputfun (quote input-funbox) "cnstr importance" "C-IMP" 1) (om-load-inputfun (quote input-funbox) "variable Map" "VARMAP" nil) (om-load-inputfun (quote input-funbox) "choice map" "CHOICEMAP" (list (quote function) (quote lmidic))))) (om-make-point 399 213) (om-make-point 65 53) nil nil "user-cnstr" 1) (om-load-boxcall (quote genfun) "X/X_PROF" (quote x/x_prof) (quote ((om-load-inputfun (quote input-funbox) "expression" "EXP" (list (quote |0_16|) (list 0 (quote u) (list (quote max) 3)))) (om-load-inputfun (quote input-funbox) "constr importance" "C-IMP" 1) (om-load-inputfun (quote input-funbox) "var map-internal voice" "VMAPINTERNAL" nil) (om-load-inputfun (quote input-funbox) "choice map-upper voice" "CMAPUPPER" (list (quote function) (list (quote lambda) (list (quote x)) (list (quote last-elem) (list (quote lmidic) (quote x)))))) (om-load-inputfun (quote input-funbox) "choice map-lower voice" "CMAPLOWER" (list (quote function) (list (quote lambda) (list (quote x)) (list (quote first) (list (quote lmidic) (quote x)))))) (om-load-inputfun (quote input-funbox) "choice map-internal voice" "CMAPINTERNAL" (list (quote function) (quote lmidic))))) (om-make-point 311 214) nil nil nil nil 1) (om-load-boxcall (quote genfun) "I-DST_FILT" (quote i-dst_filt) (quote ((om-load-inputfun (quote input-funbox) "logical expression" "EXP" (list (quote |0_5|) (list (quote not) (list (quote or) (list (quote *) 400 700 (quote *)) (list (quote ?) (quote ?) 200 (quote *)))) (quote |6_8|) (list (quote and) (list (quote *) 700 (quote *))))) (om-load-inputfun (quote input-funbox) "constraint importance" "C-IMP" 1) (om-load-inputfun (quote input-funbox) "variable Map" "VARMAP" nil) (om-load-inputfun (quote input-funbox) "choice Map" "CHOICEMAP" (list (quote function) (quote lmidic))))) (om-make-point 281 148) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-DST_FILT" (quote x-dst_filt) (quote ((om-load-inputfun (quote input-funbox) "expression" "EXP" (list (quote |0_6|) (list (quote l) (list (quote or) (list 400) (list 300) (list 500) (list 700)) (quote u) (list (quote not) (list 700))))) (om-load-inputfun (quote input-funbox) "cnstr importance" "C-IMP" 1) (om-load-inputfun (quote input-funbox) "vmapUpper" "VMAPUPPER" nil) (om-load-inputfun (quote input-funbox) "vmapLower" "VMAPLOWER" nil) (om-load-inputfun (quote input-funbox) "vmapInternal" "VMAPINTERNAL" nil) (om-load-inputfun (quote input-funbox) "choice mapUpper" "CMAPUPPER" nil) (om-load-inputfun (quote input-funbox) "choice mapLower" "CMAPLOWER" (list (quote function) (list (quote lambda) (list (quote x)) (list (quote first) (list (quote lmidic) (quote x)))))) (om-load-inputfun (quote input-funbox) "choice mapInternal" "CMAPINTERNAL" (list (quote function) (quote lmidic))))) (om-make-point 211 211) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-PTS_FILT" (quote x-pts_filt) (quote ((om-load-inputfun (quote input-funbox) "expression" "EXP" (list (quote |0_20|) (list (quote l) (list (quote not) (list (quote or) (list (quote x) (quote x) (quote ?)) (list (quote x) (quote ?) (quote x))))))) (om-load-inputfun (quote input-funbox) "cnstr importance" "C-IMP" 1) (om-load-inputfun (quote input-funbox) "vmapUpper" "VMAPUPPER" nil) (om-load-inputfun (quote input-funbox) "vmapLower" "VMAPLOWER" nil) (om-load-inputfun (quote input-funbox) "vmapInternal" "VMAPINTERNAL" nil) (om-load-inputfun (quote input-funbox) "choice mapUpper" "CMAPUPPER" nil) (om-load-inputfun (quote input-funbox) "choice mapLower" "CMAPLOWER" (list (quote function) (list (quote lambda) (list (quote x)) (list (quote first) (list (quote lmidic) (quote x)))))) (om-load-inputfun (quote input-funbox) "choice mapInternal" "CMAPINTERNAL" (list (quote function) (quote lmidic))))) (om-make-point 164 169) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X_PROF" (quote x_prof) (quote ((om-load-inputfun (quote input-funbox) "expression" "EXP" (list (quote |0_8|) (list (quote u) (list -3 2)))) (om-load-inputfun (quote input-funbox) "cnstr importance" "C-IMP" 1) (om-load-inputfun (quote input-funbox) "vmapUpper" "VMAPUPPER" nil) (om-load-inputfun (quote input-funbox) "vmapLower" "VMAPLOWER" nil) (om-load-inputfun (quote input-funbox) "vmapInternal" "VMAPINTERNAL" nil) (om-load-inputfun (quote input-funbox) "choice mapUpper" "CMAPUPPER" nil) (om-load-inputfun (quote input-funbox) "choice mapLower" "CMAPLOWER" (list (quote function) (list (quote lambda) (list (quote x)) (list (quote first) (list (quote lmidic) (quote x)))))) (om-load-inputfun (quote input-funbox) "choice mapInternal" "CMAPINTERNAL" (list (quote function) (quote lmidic))))) (om-make-point 105 113) nil nil nil nil 1) (om-load-boxcall (quote genfun) "I/I-DST_FILT" (quote i/i-dst_filt) (quote ((om-load-inputfun (quote input-funbox) "expression" "EXP" (list (quote |0_20|) (list 0 1 (list (quote not) (list (quote x) (quote x))) 4 5 (list (quote not) (list 500 (quote ?)))))) (om-load-inputfun (quote input-funbox) "variable Map" "C-IMP" 1) (om-load-inputfun (quote input-funbox) "cnstr importance" "VARMAP" nil) (om-load-inputfun (quote input-funbox) "choice Map" "CHOICEMAP" (list (quote function) (quote lmidic))))) (om-make-point 64 165) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PTS_FILT" (quote pts_filt) (quote ((om-load-inputfun (quote input-funbox) "expression" "EXP" (list 0 (list (quote *) (quote >8200)) (quote |1_20|) (list (quote not) (list (quote *) 5500 (quote *) 7700 (quote *))))) (om-load-inputfun (quote input-funbox) "cnstr importance" "C-IMP" 1) (om-load-inputfun (quote input-funbox) "variable Map" "VARMAP" nil) (om-load-inputfun (quote input-funbox) "choice Map" "CHOICEMAP" (list (quote function) (quote lmidic))))) (om-make-point 29 205) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "mypatch1" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote lispfun) "NOT" (quote not) (quote ((om-load-inputfun (quote input-funbox) "OBJECT" "OBJECT" nil))) (om-make-point 113 242) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 167 111) (om-make-point 35 53) nil nil nil 1) (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" 0))) (om-make-point 25 111) (om-make-point 35 53) nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBSETP" (quote subsetp) (quote ((om-load-inputfun (quote input-funbox) "LIST1" "LIST1" nil) (om-load-inputfun (quote input-funbox) "LIST2" "LIST2" nil))) (om-make-point 68 183) (om-make-point 47 37) nil nil nil 1) (om-load-boxin "input1" 1 (om-make-point 171 46) "no documentation" nil nil nil) (om-load-boxin "input" 0 (om-make-point 9 45) "no documentation" nil nil nil) (om-load-boxout "output" 0 (om-make-point 106 293) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (quote ((3 0 0 0 nil 0) (4 0 1 0 nil 0) (5 0 2 0 nil 0) (2 0 3 0 nil 0) (1 0 3 1 nil 0) (0 0 6 0 nil 0))) 6.030006 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 377 142) (om-make-point 47 53) nil "l" nil) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 107 176) (om-make-point 29 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 0))) (om-make-point 101 126) (om-make-point 29 37) nil nil nil 1) (om-load-boxin "input" 0 (om-make-point 69 50) "no documentation" nil nil nil) (om-load-boxout "output" 0 (om-make-point 101 235) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (quote ((1 0 0 0 nil 0) (2 0 1 0 nil 0) (0 0 3 0 nil 0))) 6.030006 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 210 13) (om-make-point 47 53) nil "l" nil) (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first list" "L1?" nil) (om-load-inputfun (quote input-funbox) "second list" "L2?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil) (om-load-inputfun (quote input-funbox) "add list" "LST?" nil))) (om-make-point 5 271) (om-make-point 466 53) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 107 67) (quote "This patch filters chords comming from a data base of chord objects") "" (om-make-point 41 379) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 234 70) (quote "Domains are defined to be OM chord objects.$The last note of the chord is stored at the $upper tree level.  The lower level contains $the whole chord object.") "" (om-make-point 324 5) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "CSOLVER1" (quote csolver) (quote ((om-load-inputfun (quote input-funbox) "number of objects" "N-OBJ" 20) (om-load-inputfun (quote input-funbox) "possible points" "P-PTS" nil) (om-load-inputfun (quote input-funbox) "number of points" "N-PTS" nil) (om-load-inputfun (quote input-funbox) "internal distances" "I-DST" nil) (om-load-inputfun (quote input-funbox) "Constraints" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "external distances" "X-DST" nil) (om-load-inputfun (quote input-funbox) "Fixed objects data base" "DATA" nil))) (om-make-point 202 338) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ1" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 0))) (om-make-point 573 23) (om-make-point 64 50) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5300 5700 6200 6900 7200 7700) (5600 5700 6400 6800 7100 7900) (5600 5700 6600 6900 7300 7600) (5200 6500 6700 6800 7600 7700) (5200 6300 6700 7100 7300 7600) (5200 5800 6200 7000 7500 7800) (5300 5700 6200 6800 7100 7600) (5200 6100 6500 6900 7400 7600) (5200 6100 6200 6700 7500 8000) (5200 6100 6500 6900 7200 7600) (5700 6200 6600 6700 7500 8100) (5200 5700 7100 7200 7500 7600) (5700 5900 6700 7100 7200 7600) (5900 6500 6900 7100 7400 7600) (5700 5900 6700 6900 7600 7900) (5200 5800 6200 6700 7200 7700) (5800 6100 6200 7100 7300 7600) (5200 6500 7000 7100 7600 8400) (5200 5900 6200 6700 7100 7900) (5200 6000 6200 6700 7200 7700) (5700 6300 6700 6800 7100 7600) (5600 5700 6200 6700 7400 7800) (5300 5800 6200 6700 7200 7800) (5900 6300 6600 6700 7100 7600) (5200 6200 6500 7100 7400 8100) (5700 6000 6200 6700 7600 7900) (6100 6200 6500 7100 7500 8400) (5200 5800 6500 6700 7300 7600) (5200 5700 6200 6800 7200 7900) (5600 6200 6800 7100 7200 8000) (5300 6000 6200 6700 7300 7900) (5700 5800 6700 6900 7700 8100) (5700 5900 6800 7100 7400 8300) (5300 5800 6200 6700 7200 7600) (5900 6200 6400 7300 7600 7800) (5200 6200 6500 7100 7300 7600) (5200 6300 7000 7100 7300 7600) (5200 5700 7200 7500 7600 7900) (5700 6300 6700 6800 7600 7800) (5400 6000 6700 7100 7200 7600) (5200 6300 6700 6800 7500 8000) (5500 5800 6200 6900 7100 7700) (5200 6000 6500 7000 7300 7600) (5200 6000 6600 7100 7200 7600) (5500 5900 6500 6700 7500 7600) (5500 5700 6400 7000 7500 7800) (5200 6200 6500 7500 7600 8100) (5700 6300 6700 7100 7200 7600) (5200 5800 6200 6800 7200 7700) (5200 6000 6300 6800 7100 7900))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000)) :ldur (quote ((1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100) (100 100 100 100 100 100))) :loffset (quote ((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (player show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode microplay scale)) (list (quote :midishare) (quote t) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 nil nil)) nil nil nil nil) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 228 393) (om-make-point 35 37) nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "LMIDIC" "LMIDIC" (list 6000)) (om-load-inputfun (quote input-funbox) "LONSET" "LONSET" (list 0 1000)) (om-load-inputfun (quote input-funbox) "LDUR" "LDUR" (list 1000)) (om-load-inputfun (quote input-funbox) "LVEL" "LVEL" (list 100)) (om-load-inputfun (quote input-funbox) "LOFFSET" "LOFFSET" (list 0)) (om-load-inputfun (quote input-funbox) "LCHAN" "LCHAN" (list 1)) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 222 441) (om-make-point 208 95) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((5700 5900 6800 7100 7400 8300) (5200 5900 6200 6700 7100 7900) (5900 6200 6400 7300 7600 7800) (5600 5700 6600 6900 7300 7600) (5200 6500 6700 6800 7600 7700) (5700 6200 6600 6700 7500 8100) (5300 6000 6200 6700 7300 7900) (5600 5700 6200 6700 7400 7800) (5200 5800 6500 6700 7300 7600) (5700 5900 6700 6900 7600 7900) (5600 6200 6800 7100 7200 8000) (5200 6200 6500 7100 7400 8100) (5300 5800 6200 6700 7200 7800) (5900 6200 6400 7300 7600 7800) (5500 5700 6400 7000 7500 7800) (6100 6200 6500 7100 7500 8400) (5600 6200 6800 7100 7200 8000) (5200 6200 6500 7100 7300 7600) (5700 5900 6700 6900 7600 7900) (6100 6200 6500 7100 7500 8400))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000)) :ldur (quote ((1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000) (1000 1000 1000 1000 1000 1000))) :lvel (quoteloffset (quote ((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0))) :lchan (quote ((1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1) (1 1 1 1 1 1))) :legato 100)))) (load-port-info newobj (quote ((0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0) (0 0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player show-stems approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos palette-mode obj-mode microplay scale)) (list (quote :midishare) (quote t) 4 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 0 0 nil nil)) t nil nil nil) (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 529 240) (om-make-point 29 37) nil nil "list" 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 374 93) (om-make-point 152 40) (list (quote function) (list (quote lambda) (list (quote x)) (list (quote first) (list (quote last) (list (quote lmidic) (quote x)))))) "(function (lambda(x)$   (first (last (lmidic x)))))" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 531 199) (om-make-point 29 37) nil nil nil 1) (om-load-boxcall (quote genfun) "VARIABLE-DOMAINS" (quote variable-domains) (quote ((om-load-inputfun (quote input-funbox) "list of values in each variable domain" "DOMAINS" (list (list 1 2) (list 3 4))))) (om-make-point 491 290) (om-make-point 101 45) nil nil "variable-domains" 1))) (quote ((15 0 0 0 nil 0) (9 0 1 0 nil 0) (10 0 4 2 nil 0) (10 0 5 2 nil 0) (10 0 6 2 nil 0) (8 0 11 0 nil 0) (7 0 11 1 nil 0) (6 0 11 2 nil 0) (5 0 11 3 nil 0) (4 0 11 4 nil 0) (3 0 11 5 nil 0) (2 0 11 6 nil 0) (1 0 11 8 nil 0) (11 0 14 4 nil 0) (21 0 14 6 nil 0) (14 0 16 0 nil 0) (16 0 17 1 nil 0) (20 0 18 0 nil 0) (19 0 20 0 nil 0) (0 0 20 1 nil 0) (18 0 21 0 nil 0))) nil 6.030006))
