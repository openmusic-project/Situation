; OM File Header - Saved 2010/11/16 19:27:30
; (6.04 :patc (om-make-point 249 112) (om-make-point 50 50) (om-make-point 500 400) "No documentation " 183 0 nil "2010/11/16 19:27:30")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "r-def" (quote ((om-load-boxcall (quote abstraction) "rhythm-gencn-2" (om-load-patch-abs1 "rhythm-gencn-2" (quote ((om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" (list 5 -6 -8)))) (om-make-point 300 211) (om-make-point 41 53) nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" (quote t)) (om-load-inputfun (quote input-funbox) "else" "ELSE" (quote t)))) (om-make-point 105 199) (om-make-point 29 53) nil nil nil 1) (om-load-boxcall (quote lispfun) "=" (quote =) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 181 287) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 261 260) (om-make-point 41 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST*" (quote list*) (quote ((om-load-inputfun (quote input-funbox) "OBJECT" "OBJECT" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 204 182) (om-make-point 35 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBSEQ" (quote subseq) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "START" "START" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 308 137) (om-make-point 41 37) nil nil nil 1) (om-load-boxcall (quote genfun) "PREV-INSTANCES" (quote prev-instances) (quote nil) (om-make-point 260 69) (om-make-point 89 53) nil nil nil 1) (om-load-boxcall (quote lispfun) ">" (quote >) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 35 111) (om-make-point 24 37) nil nil nil 1) (om-load-boxin "input4" 4 (om-make-point 205 45) "no documentation" nil nil nil) (om-load-boxin "input3" 3 (om-make-point 155 45) "no documentation" nil nil nil) (om-load-boxin "input2" 2 (om-make-point 98 46) "no documentation" nil nil nil) (om-load-boxin "input1" 1 (om-make-point 356 55) "no documentation" nil nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "no documentation" nil nil nil) (om-load-boxout "output" 0 (om-make-point 99 281) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (quote ((4 0 0 0 nil 0) (7 0 1 0 nil 0) (2 0 1 2 nil 0) (3 0 2 0 nil 0) (0 0 3 1 nil 0) (9 0 4 0 nil 0) (8 0 4 1 nil 0) (5 0 4 2 nil 0) (6 0 5 0 nil 0) (11 0 5 2 nil 0) (12 0 7 0 nil 0) (10 0 7 1 nil 0) (1 0 13 0 nil 0))) 6.04 nil) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input4" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input3" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input2" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 78 119) (om-make-point 89 53) nil "l" nil) (om-load-boxcall (quote abstraction) "rhythm-cnstr-gen" (om-load-patch-abs1 "rhythm-cnstr-gen" (quote ((om-load-boxcall (quote lispfun) "*" (quote *) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 300 217) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 307 134) (om-make-point 41 53) nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" (list 5 -6 -8)))) (om-make-point 174 129) (om-make-point 41 53) nil nil nil 1) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" (quote t)) (om-load-inputfun (quote input-funbox) "else" "ELSE" nil))) (om-make-point 283 404) (om-make-point 29 53) nil nil nil 1) (om-load-boxcall (quote lispfun) "ZEROP1" (quote zerop) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil))) (om-make-point 324 284) (om-make-point 35 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "DIVISOR" "DIVISOR" nil))) (om-make-point 207 315) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote min)) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 230 273) (om-make-point 41 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote max)) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 137 279) (om-make-point 41 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 192 228) (om-make-point 29 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "SUBSEQ" (quote subseq) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "START" "START" 0) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 200 71) (om-make-point 41 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "CONS" (quote cons) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "LIST-OR-THING" "LIST-OR-THING" nil))) (om-make-point 136 122) (om-make-point 29 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "ZEROP1" (quote zerop) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil))) (om-make-point 199 360) (om-make-point 35 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "REDUCE" (quote reduce) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote +)) (om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 119 168) (om-make-point 41 37) nil nil nil 1) (om-load-boxin "input3" 3 (om-make-point 297 68) "no documentation" nil nil nil) (om-load-boxin "input2" 2 (om-make-point 90 46) "no documentation" nil nil nil) (om-load-boxcall (quote genfun) "PREV-INSTANCES" (quote prev-instances) (quote nil) (om-make-point 152 3) (om-make-point 89 53) nil nil nil 1) (om-load-boxin "input1" 1 (om-make-point 346 16) "no documentation" nil nil nil) (om-load-boxin "input" 0 (om-make-point 244 14) "no documentation" nil nil nil) (om-load-boxout "output" 0 (om-make-point 288 478) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (quote ((12 0 0 0 nil 0) (1 0 0 1 nil 0) (13 0 1 0 nil 0) (10 0 2 0 nil 0) (4 0 3 0 nil 0) (11 0 3 2 nil 0) (0 0 4 0 nil 0) (7 0 5 0 nil 0) (6 0 5 1 nil 0) (8 0 6 1 nil 0) (8 0 7 1 nil 0) (12 0 8 0 nil 0) (1 0 8 1 nil 0) (15 0 9 0 nil 0) (17 0 9 2 nil 0) (14 0 10 0 nil 0) (9 0 10 1 nil 0) (5 0 11 0 nil 0) (2 0 12 1 nil 0) (3 0 18 0 nil 0))) 6.04 nil) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input3" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input2" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 307 98) (om-make-point 101 53) nil "l" nil) (om-load-boxin "input" 0 (om-make-point 72 8) "no documentation" nil nil nil) (om-load-boxout "output" 0 (om-make-point 282 304) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 89 89) (om-make-point 23 20) 6 "6" nil) (om-load-boxcall (quote lispfun) "-" (quote -) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" 1))) (om-make-point 156 43) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 0) (om-load-inputfun (quote input-funbox) "end " "END" 10) (om-load-inputfun (quote input-funbox) "step" "STEP" 1))) (om-make-point 193 74) (om-make-point 65 53) nil nil nil 1) (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 210 290) (om-make-point 41 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "GENERIC-CNSTR1" (quote generic-cnstr) (quote ((om-load-inputfun (quote input-funbox) "CNSTR" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "VAR-INDS" "VAR-INDS" nil) (om-load-inputfun (quote input-funbox) "OPTION" "OPTION" (list (quote a) (quote i))))) (om-make-point 110 207) (om-make-point 83 37) nil nil nil 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 261 144) (om-make-point 36 28) (list (quote s) (quote i)) "(s i)" nil) (om-load-boxcall (quote lispfun) "GENERIC-CNSTR1" (quote generic-cnstr) (quote ((om-load-inputfun (quote input-funbox) "CNSTR" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "VAR-INDS" "VAR-INDS" nil) (om-load-inputfun (quote input-funbox) "OPTION" "OPTION" (list (quote a) (quote i))))) (om-make-point 260 200) (om-make-point 83 37) nil nil nil 1))) (quote ((4 0 0 0 nil 0) (7 0 3 0 nil 0) (2 0 5 0 nil 0) (5 0 6 1 nil 0) (8 0 7 0 nil 0) (10 0 7 1 nil 0) (0 0 8 0 nil 0) (6 0 8 1 nil 0) (9 0 8 2 nil 0) (1 0 10 0 nil 0) (6 0 10 1 nil 0) (9 0 10 2 nil 0))) nil 6.04))
