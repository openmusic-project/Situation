; OM File Header - Saved 2010/11/16 19:27:30
; (6.04 :patc (om-make-point 292 112) (om-make-point 50 50) (om-make-point 785 481) "No documentation " 183 0 nil "2010/11/16 19:27:30")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "fix-vars" (quote ((om-load-boxcomment "comment" (om-make-point 54 42) (quote "impulsion$(4)") "" (om-make-point 290 51) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 107 28) (quote "tempo-impulsion (3)") "" (om-make-point 210 33) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 71 28) (quote "pulsation (2)") "" (om-make-point 151 63) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 64 42) (quote "tempo-puls$(1)") "" (om-make-point 84 31) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 57 28) (quote "n-puls (0)") "" (om-make-point 6 68) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 72 28) (quote "measures(5)") "" (om-make-point 356 41) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 59 28) (quote "t-meas(6)") "" (om-make-point 440 54) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 50 28) (quote "veloc(7)") "" (om-make-point 521 49) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 295 308) (om-make-point 64 37) nil nil nil 1) (om-load-boxcall (quote genfun) "GENERIC-CNSTR" (quote generic-cnstr) (quote ((om-load-inputfun (quote input-funbox) "constraint predicate" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "a list of variable indexes" "VAR-INDS" (list 7)) (om-load-inputfun (quote input-funbox) "fix, all or step" "OPTION" (quote common-lisp-user::f)))) (om-make-point 546 196) (om-make-point 83 53) nil nil nil 1) (om-load-boxcall (quote genfun) "GENERIC-CNSTR" (quote generic-cnstr) (quote ((om-load-inputfun (quote input-funbox) "constraint predicate" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "a list of variable indexes" "VAR-INDS" (list 6)) (om-load-inputfun (quote input-funbox) "fix, all or step" "OPTION" (quote common-lisp-user::f)))) (om-make-point 461 201) (om-make-point 83 53) nil nil nil 1) (om-load-boxcall (quote genfun) "GENERIC-CNSTR" (quote generic-cnstr) (quote ((om-load-inputfun (quote input-funbox) "constraint predicate" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "a list of variable indexes" "VAR-INDS" (list 5)) (om-load-inputfun (quote input-funbox) "fix, all or step" "OPTION" (quote common-lisp-user::f)))) (om-make-point 393 201) (om-make-point 83 53) nil nil nil 1) (om-load-boxcall (quote genfun) "GENERIC-CNSTR" (quote generic-cnstr) (quote ((om-load-inputfun (quote input-funbox) "constraint predicate" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "a list of variable indexes" "VAR-INDS" (list 4)) (om-load-inputfun (quote input-funbox) "fix, all or step" "OPTION" (quote common-lisp-user::f)))) (om-make-point 328 200) (om-make-point 83 53) nil nil nil 1) (om-load-boxcall (quote genfun) "GENERIC-CNSTR" (quote generic-cnstr) (quote ((om-load-inputfun (quote input-funbox) "constraint predicate" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "a list of variable indexes" "VAR-INDS" (list 3)) (om-load-inputfun (quote input-funbox) "fix, all or step" "OPTION" (quote common-lisp-user::f)))) (om-make-point 238 199) (om-make-point 83 53) nil nil nil 1) (om-load-boxcall (quote genfun) "GENERIC-CNSTR" (quote generic-cnstr) (quote ((om-load-inputfun (quote input-funbox) "constraint predicate" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "a list of variable indexes" "VAR-INDS" (list 2)) (om-load-inputfun (quote input-funbox) "fix, all or step" "OPTION" (quote common-lisp-user::f)))) (om-make-point 161 200) (om-make-point 83 53) nil nil nil 1) (om-load-boxcall (quote genfun) "GENERIC-CNSTR" (quote generic-cnstr) (quote ((om-load-inputfun (quote input-funbox) "constraint predicate" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "a list of variable indexes" "VAR-INDS" (list 1)) (om-load-inputfun (quote input-funbox) "fix, all or step" "OPTION" (quote common-lisp-user::f)))) (om-make-point 99 195) (om-make-point 83 53) nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 511 82) (om-make-point 70 28) (list 1 2 3 4 5) "(1 2 3 4 5)" nil) (om-load-boxcall (quote patch-box) "set-fixes1" (quote ("elements" "constraints" "situation" "rhythmic examples" "set-fixes")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 513 112) (om-make-point 59 53) nil "l" nil 1) (om-load-boxcall (quote patch-box) "set-fixes1" (quote ("elements" "constraints" "situation" "rhythmic examples" "set-fixes")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 447 121) (om-make-point 59 53) nil "l" nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 441 88) (om-make-point 36 28) (list 15) "(15)" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 366 75) (om-make-point 26 28) nil "nil" nil) (om-load-boxcall (quote patch-box) "set-fixes1" (quote ("elements" "constraints" "situation" "rhythmic examples" "set-fixes")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 373 113) (om-make-point 59 53) nil "l" nil 1) (om-load-boxcall (quote patch-box) "set-fixes1" (quote ("elements" "constraints" "situation" "rhythmic examples" "set-fixes")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 309 126) (om-make-point 59 53) nil "l" nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 304 91) (om-make-point 26 28) nil "nil" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 235 53) (om-make-point 42 28) (list 180) "(180)" nil) (om-load-boxcall (quote patch-box) "set-fixes1" (quote ("elements" "constraints" "situation" "rhythmic examples" "set-fixes")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 240 120) (om-make-point 59 53) nil "l" nil 1) (om-load-boxcall (quote patch-box) "set-fixes1" (quote ("elements" "constraints" "situation" "rhythmic examples" "set-fixes")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 174 117) (om-make-point 59 53) nil "l" nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 169 86) (om-make-point 41 28) (list 1/4) "(1/4)" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 108 78) (om-make-point 26 28) nil "nil" nil) (om-load-boxcall (quote patch-box) "set-fixes1" (quote ("elements" "constraints" "situation" "rhythmic examples" "set-fixes")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 104 117) (om-make-point 59 53) nil "l" nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 9 94) (om-make-point 70 28) (list 1 2 3 4 5) "(1 2 3 4 5)" nil) (om-load-boxout "output" 0 (om-make-point 273 372) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote genfun) "GENERIC-CNSTR" (quote generic-cnstr) (quote ((om-load-inputfun (quote input-funbox) "constraint predicate" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "a list of variable indexes" "VAR-INDS" (list 0)) (om-load-inputfun (quote input-funbox) "fix, all or step" "OPTION" (quote common-lisp-user::f)))) (om-make-point 10 192) (om-make-point 83 53) nil nil nil 1) (om-load-boxcall (quote patch-box) "set-fixes" (quote ("elements" "constraints" "situation" "rhythmic examples" "set-fixes")) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 19 125) (om-make-point 59 53) nil "l" nil 1))) (quote ((32 0 8 0 nil 0) (14 0 8 1 nil 0) (13 0 8 2 nil 0) (10 0 8 6 nil 0) (9 0 8 7 nil 0) (17 0 9 0 nil 0) (18 0 10 0 nil 0) (21 0 11 0 nil 0) (22 0 12 0 nil 0) (25 0 13 0 nil 0) (26 0 14 0 nil 0) (29 0 15 0 nil 0) (16 0 17 0 nil 0) (19 0 18 0 nil 0) (20 0 21 0 nil 0) (23 0 22 0 nil 0) (24 0 25 0 nil 0) (27 0 26 0 nil 0) (28 0 29 0 nil 0) (8 0 31 0 nil 0) (33 0 32 0 nil 0) (30 0 33 0 nil 0))) nil 6.04))
