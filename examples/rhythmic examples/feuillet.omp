; OM File Header - Saved 2010/11/16 19:27:30
; (6.030006 :patc (om-make-point 193 29) (om-make-point 372 4) (om-make-point 1064 590) "No documentation " 183 0 nil "2010/11/16 19:27:30")
; End File Header
(in-package :om)(load-lib-for (quote ("Situation")))(setf *om-current-persistent* (om-load-patch1 "feuillet" (quote ((om-load-boxcall (quote genfun) "CSOLVER1" (quote csolver) (quote ((om-load-inputfun (quote input-funbox) "number of objects" "N-OBJ" 8) (om-load-inputfun (quote input-funbox) "possible points" "P-PTS" nil) (om-load-inputfun (quote input-funbox) "number of points" "N-PTS" nil) (om-load-inputfun (quote input-funbox) "internal distances" "I-DST" nil) (om-load-inputfun (quote input-funbox) "Constraints" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "external distances" "X-DST" nil) (om-load-inputfun (quote input-funbox) "Fixed objects data base" "DATA" nil) (om-load-inputfun (quote input-funbox) "find next solution" "X-SOL" nil) (om-load-inputfun (quote input-funbox) "Number of solutions" "N-SOLS" 6))) (om-make-point 289 224) nil (list (list (list 4 60 1/4 180 1/12 1 15 3) (list 3 45 1/4 180 1/16 3/4 15 4))) "x" nil 1) (om-load-boxcall (quote genfun) "CSOLVER2" (quote csolver) (quote ((om-load-inputfun (quote input-funbox) "number of objects" "N-OBJ" 126) (om-load-inputfun (quote input-funbox) "possible points" "P-PTS" (list (quote common-lisp-user::|48_72|))) (om-load-inputfun (quote input-funbox) "number of points" "N-PTS" 1) (om-load-inputfun (quote input-funbox) "internal distances" "I-DST" (list 2 7)) (om-load-inputfun (quote input-funbox) "Constraints" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "external distances" "X-DST" (list 1 3)))) (om-make-point 463 296) nil nil nil nil 1) (om-load-boxcall (quote genfun) "X-PTS_RNW" (quote x-pts_rnw) (quote ((om-load-inputfun (quote input-funbox) "expression" "EXP" (list (quote |0_125|) (list 0 (list 8 (quote max) 2)))))) (om-make-point 498 233) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 183 56) (quote "implements the theory in the paper $\"le feuiellete du tempo\" by$Francois Nicolas") "" (om-make-point 70 431) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 363 347) (om-make-point 35 37) nil nil nil 1) (om-load-editor-box1 "VOICE1" (quote voice) (quote ((om-load-inputfun (quote input-funbox) "object or object list" "object" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" (list (quote ?) (list (list (quote |4//4|) (list 1 (list 1 (list 1 -2 1 1)) 1 1)) (list (quote |4//4|) (list 1 (list 1 (list 1 2 1 1)) -1 1))))) (om-load-inputfun (quote input-funbox) "CHORDS" "CHORDS" (list (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord))) (om-load-inputfun (quote input-funbox) "TEMPO" "TEMPO" 60) (om-load-inputfun (quote input-funbox) "LEGATO" "LEGATO" 100))) (om-make-point 258 433) (om-make-point 429 100) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (7/4 (((4 4) ((1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (1 1 1)))) ((3 4) ((1 (1 1 1 1)) (1 (1 1 1 1)) (1 (1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5900)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5800)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (333)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5700)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5600)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5500)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5300)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5400)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5100)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4800)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (4900)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (5000)) :ldur (quote (250)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (player winpos winsize mode grillestep notechancolor? zoom deltapict approx fontsize staff cmnpref outport inport palette-mode obj-mode show-stems microplay scale)) (list (quote :midishare) 2621450 18350450 0 1000 nil 1 (om-make-point 0 0) 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) 0 0 0 0 (quote t) nil nil)) t nil nil nil) (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote lispfun) "MAPCAR1" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote second)) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 235 239) (om-make-point 41 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" (quote first)) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 158 236) (om-make-point 41 37) nil nil nil 1) (om-load-boxout "output1" 1 (om-make-point 197 304) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote ?)) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 88 251) (om-make-point 29 37) nil nil nil 1) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil))) (om-make-point 130 163) (om-make-point 41 53) nil nil (list (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 105 352) (om-make-point 29 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 1) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 209 246) (om-make-point 29 37) nil nil nil 1) (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 74 394) (om-make-point 47 53) nil nil nil 3) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 1))) (om-make-point 125 190) (om-make-point 24 35) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST1" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" 3) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (quote //)))) (om-make-point 17 251) (om-make-point 29 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 31 324) (om-make-point 29 37) nil nil nil 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" 1) (om-load-inputfun (quote input-funbox) "times" "NUM" 0))) (om-make-point 50 261) (om-make-point 53 53) nil nil "repeat-n" 1) (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "patch" "SELF" 1) (om-load-inputfun (quote input-funbox) "times" "NUM" 0))) (om-make-point 269 225) (om-make-point 53 53) nil nil nil 1) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1) (om-load-inputfun (quote input-funbox) "number or tree" "NUM" 1))) (om-make-point 221 197) (om-make-point 24 35) nil nil nil 1) (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 140 131) (om-make-point 35 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "FIFTH" (quote fifth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 287 141) (om-make-point 35 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 85 135) (om-make-point 41 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 30 128) (om-make-point 35 37) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 164 73) (om-make-point 53 53) nil nil nil 1) (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 240 472) (om-make-point 47 53) nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 32 462) (om-make-point 53 53) nil nil 0)) (quote ((5 0 0 0 nil 0) (11 0 0 1 nil 0) (7 0 1 1 nil 0) (0 0 2 0 nil 0) (9 0 3 1 nil 0) (12 0 4 0 nil 0) (3 0 4 1 nil 0) (4 0 5 0 nil 0) (6 0 5 1 nil 0) (1 0 6 0 nil 0) (12 0 6 1 nil 0) (8 0 7 1 nil 0) (9 0 8 0 nil 0) (10 0 8 1 nil 0) (13 0 9 0 nil 0) (13 0 10 0 nil 0) (13 0 11 0 nil 0) (13 0 12 0 nil 0) (14 0 13 0 nil 0) (2 1 15 0 nil 0) (2 0 16 0 nil 0))) 1 "omloop" nil) (om-load-boxin "input" 0 (om-make-point 164 71) "no documentation" nil nil nil) (om-load-boxout "output" 0 (om-make-point 110 309) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (quote ((4 0 0 1 nil 0) (4 0 1 1 nil 0) (0 0 2 0 nil 0) (1 0 3 1 nil 0) (5 0 4 0 nil 0) (3 0 6 0 nil 0))) 6.030006 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 284 281) (om-make-point 77 53) nil nil "build-om-rtm") (om-load-boxcall (quote abstraction) "feuill-domains" (om-load-patch-abs1 "feuill-domains" (quote ((om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 578 83) (om-make-point 96 48) (list 1 1/2 1/4 1/8 1/12 1/16 1/20 1/32) "(1 1/2 1/4 1/8  1/12 1/16 1/20 1/32)" nil) (om-load-boxcomment "comment" (om-make-point 62 20) (quote "n-puls (0)") "" (om-make-point 466 360) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "EXPAND-LST" (quote expand-lst) (quote ((om-load-inputfun (quote input-funbox) "the list to expand" "LIST" (list (quote common-lisp-user::|1_10|))))) (om-make-point 535 338) (om-make-point 65 53) nil nil nil 1) (om-load-boxcall (quote genfun) "EXPAND-LST" (quote expand-lst) (quote ((om-load-inputfun (quote input-funbox) "the list to expand" "LIST" (list (quote common-lisp-user::|1_9|))))) (om-make-point 760 306) (om-make-point 65 53) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 50 22) (quote "veloc(7)") "" (om-make-point 828 325) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "EXPAND-LST" (quote expand-lst) (quote ((om-load-inputfun (quote input-funbox) "the list to expand" "LIST" (list (quote common-lisp-user::|10_100|))))) (om-make-point 760 230) (om-make-point 65 53) nil nil nil 1) (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" (list 5/2)))) (om-make-point 737 193) (om-make-point 41 37) nil nil nil 1) (om-load-boxcall (quote genfun) "EXPAND-LST" (quote expand-lst) (quote ((om-load-inputfun (quote input-funbox) "the list to expand" "LIST" (list (quote |5/4_9/4S1/4|))))) (om-make-point 794 131) (om-make-point 65 53) nil nil nil 1) (om-load-boxcall (quote genfun) "EXPAND-LST" (quote expand-lst) (quote ((om-load-inputfun (quote input-funbox) "the list to expand" "LIST" (list (quote |5/8_9/8S1/8|))))) (om-make-point 724 129) (om-make-point 65 53) nil nil nil 1) (om-load-boxcall (quote genfun) "EXPAND-LST" (quote expand-lst) (quote ((om-load-inputfun (quote input-funbox) "the list to expand" "LIST" (list (quote |1/16_9/16S1/16|))))) (om-make-point 656 132) (om-make-point 65 53) nil nil nil 1) (om-load-boxcall (quote genfun) "EXPAND-LST" (quote expand-lst) (quote ((om-load-inputfun (quote input-funbox) "the list to expand" "LIST" (list (quote common-lisp-user::|30_220|))))) (om-make-point 511 280) (om-make-point 65 53) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 103 22) (quote "tempo-impulsion (3)") "" (om-make-point 440 144) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 59 34) (quote "tempo-puls$(1)") "" (om-make-point 445 293) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 628 301) (om-make-point 64 37) nil nil nil 1) (om-load-boxcall (quote genfun) "EXPAND-LST" (quote expand-lst) (quote ((om-load-inputfun (quote input-funbox) "the list to expand" "LIST" (list (quote common-lisp-user::|40_700|))))) (om-make-point 533 138) (om-make-point 65 53) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 50 32) (quote "measures(5)") "" (om-make-point 781 194) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 69 20) (quote "pulsation (2)") "" (om-make-point 446 217) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 386 241) (om-make-point 166 20) (list 1 1/2 1/4 1/8 1/16 1/32) "(1 1/2 1/4 1/8 1/16 1/32)" nil) (om-load-boxcomment "comment" (om-make-point 66 22) (quote "t-meas(6)") "" (om-make-point 803 241) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 51 31) (quote "impulsion$(4)") "" (om-make-point 492 91) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input0" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil))) (om-make-point 339 451) (om-make-point 41 53) nil nil (list (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "WHAT?" nil))) (om-make-point 51 241) (om-make-point 47 53) nil nil nil 3) (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "if" "TEST" nil) (om-load-inputfun (quote input-funbox) "then" "ACTION" nil) (om-load-inputfun (quote input-funbox) "else" "ELSE" nil))) (om-make-point 66 186) (om-make-point 24 53) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 175 117) (om-make-point 53 53) nil nil nil 1) (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 36 99) (om-make-point 53 53) nil nil nil 1) (om-load-boxin "input1" 1 (om-make-point 182 54) "no documentation" nil nil nil) (om-load-boxin "input0" 0 (om-make-point 5 40) "no documentation" nil nil nil) (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 110 302) (om-make-point 47 53) nil nil 0) (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "patch" "PATCH" nil))) (om-make-point 16 301) (om-make-point 53 53) nil nil 0)) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (3 0 1 1 nil 0) (2 0 1 2 nil 0) (4 0 2 0 nil 0) (5 0 3 0 nil 0) (0 1 6 0 nil 0) (0 0 7 0 nil 0))) 1 "omloop" nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 171 337) (om-make-point 64 37) nil nil nil 1) (om-load-boxin "input7" 7 (om-make-point 357 48) "no documentation" nil nil nil) (om-load-boxin "input6" 6 (om-make-point 307 48) "no documentation" nil nil nil) (om-load-boxin "input5" 5 (om-make-point 257 48) "no documentation" nil nil nil) (om-load-boxin "input4" 4 (om-make-point 207 48) "no documentation" nil nil nil) (om-load-boxin "input3" 3 (om-make-point 157 48) "no documentation" nil nil nil) (om-load-boxin "input2" 2 (om-make-point 107 48) "no documentation" nil nil nil) (om-load-boxin "input1" 1 (om-make-point 57 48) "no documentation" nil nil nil) (om-load-boxin "input" 0 (om-make-point 7 48) "no documentation" nil nil nil) (om-load-boxout "output" 0 (om-make-point 293 533) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (quote ((9 0 6 0 nil 0) (8 0 6 1 nil 0) (7 0 6 2 nil 0) (2 0 13 0 nil 0) (10 0 13 1 nil 0) (17 0 13 2 nil 0) (14 0 13 3 nil 0) (0 0 13 4 nil 0) (6 0 13 5 nil 0) (5 0 13 6 nil 0) (3 0 13 7 nil 0) (21 0 20 0 nil 0) (13 0 20 1 nil 0) (29 0 21 0 nil 0) (28 0 21 1 nil 0) (27 0 21 2 nil 0) (26 0 21 3 nil 0) (25 0 21 4 nil 0) (24 0 21 5 nil 0) (23 0 21 6 nil 0) (22 0 21 7 nil 0) (20 0 30 0 nil 0))) 6.030006 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input7" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input6" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input5" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input4" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input3" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input2" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 507 97) (om-make-point 89 53) nil nil nil) (om-load-boxcall (quote abstraction) "a=b times c" (om-load-patch-abs1 "a=b times c" (quote ((om-load-boxcall (quote lispfun) "=" (quote =) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 91 168) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "*" (quote *) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 130 123) (om-make-point 24 37) nil nil nil 1) (om-load-boxin "input2" 2 (om-make-point 160 48) "no documentation" nil nil nil) (om-load-boxin "input1" 1 (om-make-point 73 42) "no documentation" nil nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "no documentation" nil nil nil) (om-load-boxout "output" 0 (om-make-point 76 231) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (quote ((4 0 0 0 nil 0) (1 0 0 1 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0) (0 0 5 0 nil 0))) 6.030006 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input2" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 22 36) nil nil "l" nil) (om-load-boxcall (quote abstraction) "int-vxp" (om-load-patch-abs1 "int-vXp" (quote ((om-load-boxcall (quote lispfun) "INTEGERP" (quote integerp) (quote ((om-load-inputfun (quote input-funbox) "OBJECT" "OBJECT" nil))) (om-make-point 108 171) (om-make-point 53 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "*" (quote *) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 114 118) (om-make-point 24 37) nil nil nil 1) (om-load-boxin "input1" 1 (om-make-point 165 47) "no documentation" nil nil nil) (om-load-boxin "input" 0 (om-make-point 78 48) "no documentation" nil nil nil) (om-load-boxout "output" 0 (om-make-point 113 220) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (quote ((1 0 0 0 nil 0) (3 0 1 0 nil 0) (2 0 1 1 nil 0) (0 0 4 0 nil 0))) 6.030006 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 115 39) nil nil "l" nil) (om-load-boxcall (quote abstraction) "imp par mes" (om-load-patch-abs1 "imp par mes" (quote ((om-load-boxcall (quote lispfun) "ZEROP" (quote zerop) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil))) (om-make-point 120 194) (om-make-point 35 37) nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 179 111) (om-make-point 37 28) 1/32 "1/32" nil) (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "NUMBER" "NUMBER" nil) (om-load-inputfun (quote input-funbox) "DIVISOR" "DIVISOR" nil))) (om-make-point 128 153) (om-make-point 24 37) nil nil nil 1) (om-load-boxcall (quote lispfun) "*" (quote *) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 123 112) (om-make-point 24 37) nil nil nil 1) (om-load-boxin "input1" 1 (om-make-point 144 43) "no documentation" nil nil nil) (om-load-boxin "input" 0 (om-make-point 84 46) "no documentation" nil nil nil) (om-load-boxout "output" 0 (om-make-point 122 247) (quote ((om-load-inputfun (quote input-funbox) "out" "out" nil))) nil nil))) (quote ((2 0 0 0 nil 0) (3 0 2 0 nil 0) (1 0 2 1 nil 0) (5 0 3 0 nil 0) (4 0 3 1 nil 0) (0 0 6 0 nil 0))) 6.030006 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "no documentation" "input1" nil) (om-load-inputfun (quote input-funbox) "no documentation" "input" nil))) (om-make-point 183 38) nil nil "l" nil) (om-load-boxcall (quote genfun) "CH-SOL" (quote ch-sol) (quote ((om-load-inputfun (quote input-funbox) "solution" "LS" nil))) (om-make-point 436 354) (om-make-point 41 45) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 59 28) (quote "t-meas(6)") "" (om-make-point 753 6) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 685 43) (om-make-point 26 28) nil "nil" nil) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 619 43) (om-make-point 26 28) nil "nil" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 386 46) (om-make-point 26 28) nil "nil" nil) (om-load-boxcomment "comment" (om-make-point 72 28) (quote "measures(5)") "" (om-make-point 671 15) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 576 359) (om-make-point 127 45) (list 1 20/19 19/18 18/17 17/16 16/15 15/14 14/13 13/12 12/11 11/10 10/9 19/17 9/8 17/15 8/7 15/13 7/6 20/17 13/11 19/16 6/5 17/14 11/9 16/13 5/4 19/15 14/11 9/7 13/10 17/13 4/3 19/14 15/11 11/8 18/13 7/5 17/12 10/7 13/9 16/11 19/13 3/2 20/13 17/11 14/9 11/7 19/12 8/5 13/8 18/11 5/3 17/10 12/7 19/11 7/4 16/9 9/5 20/11 11/6 13/7 15/8 17/9 19/10 2 19/9 17/8 15/7 13/6 11/5 20/9 9/4 16/7 7/3 19/8 12/5 17/7 5/2 18/7 13/5 8/3 19/7 11/4 14/5 17/6 20/7 3 19/6 16/5 13/4 10/3 17/5 7/2 18/5 11/3 15/4 19/5 4 17/4 13/3 9/2 14/3 19/4 5 16/3 11/2 17/3 6 19/3 13/2 20/3 7 15/2 8 17/2 9 19/2 10 11 12 13 14 15 16 17 18 19 20) "(1 20/19 19/18 18/17 17/16 16/15 15/14 14/13 13/12 12/11 11/10 10/9 19/17 9/8 17/15 8/7 15/13 7/6 20/17 13/11$ 19/16 6/5 17/14 11/9 16/13 5/4 19/15 14/11 9/7 13/10 17/13 4/3 19/14 15/11 11/8 18/13 7/5 17/12 10/7 13/9 16/11$ 19/13 3/2 20/13 17/11 14/9 11/7 19/12 8/5 13/8 18/11 5/3 17/10 12/7 19/11 7/4 16/9 9/5 20/11 11/6 13/7 15/8$ 17/9 19/10 2 19/9 17/8 15/7 13/6 11/5 20/9 9/4 16/7 7/3 19/8 12/5 17/7 5/2 18/7 13/5 8/3 19/7 11/4 14/5 17/6$ 20/7 3 19/6 16/5 13/4 10/3 17/5 7/2 18/5 11/3 15/4 19/5 4 17/4 13/3 9/2 14/3 19/4 5 16/3 11/2 17/3 6 19/3 13/2$ 20/3 7 15/2 8 17/2 9 19/2 10 11 12 13 14 15 16 17 18 19 20)" nil) (om-load-boxcomment "comment" (om-make-point 50 28) (quote "veloc(7)") "" (om-make-point 742 376) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 56 37) (quote "pulsation (2)") "" (om-make-point 626 310) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 801 267) (om-make-point 188 134) (list 1/20 1/19 1/18 1/17 1/16 1/15 1/14 1/13 1/12 1/11 1/10 2/19 1/9 2/17 1/8 2/15 1/7 3/20 2/13 3/19 1/6 3/17 2/11 3/16 1/5 4/19 3/14 2/9 3/13 4/17 1/4 5/19 4/15 3/11 5/18 2/7 5/17 3/10 4/13 5/16 6/19 1/3 7/20 6/17 5/14 4/11 7/19 3/8 5/13 7/18 2/5 7/17 5/12 8/19 3/7 7/16 4/9 9/20 5/11 6/13 7/15 8/17 9/19 1/2 10/19 9/17 8/15 7/13 6/11 11/20 5/9 9/16 4/7 11/19 7/12 10/17 3/5 11/18 8/13 5/8 12/19 7/11 9/14 11/17 13/20 2/3 13/19 11/16 9/13 7/10 12/17 5/7 13/18 8/11 11/15 14/19 3/4 13/17 10/13 7/9 11/14 15/19 4/5 13/16 9/11 14/17 5/6 16/19 11/13 17/20 6/7 13/15 7/8 15/17 8/9 17/19 9/10 10/11 11/12 12/13 13/14 14/15 15/16 16/17 17/18 18/19 19/20 1 20/19 19/18 18/17 17/16 16/15 15/14 14/13 13/12 12/11 11/10 10/9 19/17 9/8 17/15 8/7 15/13 7/6 20/17 13/11 19/16 6/5 17/14 11/9 16/13 5/4 19/15 14/11 9/7 13/10 17/13 4/3 19/14 15/11 11/8 18/13 7/5 17/12 10/7 13/9 16/11 19/13 3/2 20/13 17/11 14/9 11/7 19/12 8/5 13/8 18/11 5/3 17/10 12/7 19/11 7/4 16/9 9/5 20/11 11/6 13/7 15/8 17/9 19/10 2 19/9 17/8 15/7 13/6 11/5 20/9 9/4 16/7 7/3 19/8 12/5 17/7 5/2 18/7 13/5 8/3 19/7 11/4 14/5 17/6 20/7 3 19/6 16/5 13/4 10/3 17/5 7/2 18/5 11/3 15/4 19/5 4 17/4 13/3 9/2 14/3 19/4 5 16/3 11/2 17/3 6 19/3 13/2 20/3 7 15/2 8 17/2 9 19/2 10 11 12 13 14 15 16 17 18 19 20) "(1/20 1/19 1/18 1/17 1/16 1/15 1/14 1/13 1/12 1/11 1/10 2/19 1/9 2/17 1/8 2/15 1/7 3/20 2/13 3/19 1/6 3/17 2/11$ 3/16 1/5 4/19 3/14 2/9 3/13 4/17 1/4 5/19 4/15 3/11 5/18 2/7 5/17 3/10 4/13 5/16 6/19 1/3 7/20 6/17 5/14 4/11$ 7/19 3/8 5/13 7/18 2/5 7/17 5/12 8/19 3/7 7/16 4/9 9/20 5/11 6/13 7/15 8/17 9/19 1/2 10/19 9/17 8/15 7/13 6/11$ 11/20 5/9 9/16 4/7 11/19 7/12 10/17 3/5 11/18 8/13 5/8 12/19 7/11 9/14 11/17 13/20 2/3 13/19 11/16 9/13 7/10$ 12/17 5/7 13/18 8/11 11/15 14/19 3/4 13/17 10/13 7/9 11/14 15/19 4/5 13/16 9/11 14/17 5/6 16/19 11/13 17/20 6/7$ 13/15 7/8 15/17 8/9 17/19 9/10 10/11 11/12 12/13 13/14 14/15 15/16 16/17 17/18 18/19 19/20 1 20/19 19/18 18/17$ 17/16 16/15 15/14 14/13 13/12 12/11 11/10 10/9 19/17 9/8 17/15 8/7 15/13 7/6 20/17 13/11 19/16 6/5 17/14 11/9$ 16/13 5/4 19/15 14/11 9/7 13/10 17/13 4/3 19/14 15/11 11/8 18/13 7/5 17/12 10/7 13/9 16/11 19/13 3/2 20/13$ 17/11 14/9 11/7 19/12 8/5 13/8 18/11 5/3 17/10 12/7 19/11 7/4 16/9 9/5 20/11 11/6 13/7 15/8 17/9 19/10 2 19/9$ 17/8 15/7 13/6 11/5 20/9 9/4 16/7 7/3 19/8 12/5 17/7 5/2 18/7 13/5 8/3 19/7 11/4 14/5 17/6 20/7 3 19/6 16/5$ 13/4 10/3 17/5 7/2 18/5 11/3 15/4 19/5 4 17/4 13/3 9/2 14/3 19/4 5 16/3 11/2 17/3 6 19/3 13/2 20/3 7 15/2 8$ 17/2 9 19/2 10 11 12 13 14 15 16 17 18 19 20)" nil) (om-load-boxcall (quote genfun) "GENERIC-CNSTR" (quote generic-cnstr) (quote ((om-load-inputfun (quote input-funbox) "constraint predicate" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "a list of variable indexes" "VAR-INDS" (list 0 2)) (om-load-inputfun (quote input-funbox) "fix, all or step" "OPTION" (quote common-lisp-user::f)))) (om-make-point 207 108) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 57 28) (quote "n-puls (0)") "" (om-make-point 362 110) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 50 28) (quote "veloc(7)") "" (om-make-point 780 151) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 727 119) (om-make-point 26 40) nil "nil$" nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 379 138) (om-make-point 30 28) (list 2) "(2)" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 663 179) (om-make-point 169 28) (list 2 3 5 7 3/2 4/3 5/2 5/3 5/4) "(2 3 5 7 3/2 4/3 5/2 5/3 5/4 )" nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 296 49) (om-make-point 70 28) (list 1 2 3 4 5) "(1 2 3 4 5)" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 811 43) (om-make-point 70 28) (list 1 2 3 4 5) "(1 2 3 4 5)" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 751 43) (om-make-point 36 28) (list 15) "(15)" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 440 36) (om-make-point 41 28) (list 1/4) "(1/4)" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 528 31) (om-make-point 42 28) (list 180) "(180)" nil) (om-load-boxcall (quote lispfun) "APPEND1" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 138 175) (om-make-point 41 37) nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 57 28) (quote "n-puls (0)") "" (om-make-point 302 21) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 50 28) (quote "veloc(7)") "" (om-make-point 825 12) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 107 28) (quote "tempo-impulsion (3)") "" (om-make-point 505 3) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "GENERIC-CNSTR" (quote generic-cnstr) (quote ((om-load-inputfun (quote input-funbox) "constraint predicate" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "a list of variable indexes" "VAR-INDS" (list 0 7)) (om-load-inputfun (quote input-funbox) "fix, all or step" "OPTION" (quote common-lisp-user::f)))) (om-make-point 101 104) nil nil nil nil 1) (om-load-boxcomment "comment" (om-make-point 64 42) (quote "tempo-puls$(1)") "" (om-make-point 369 5) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 72 28) (quote "measures(5)") "" (om-make-point 721 310) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 71 28) (quote "pulsation (2)") "" (om-make-point 434 9) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 59 28) (quote "t-meas(6)") "" (om-make-point 758 115) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcomment "comment" (om-make-point 54 42) (quote "impulsion$(4)") "" (om-make-point 617 0) nil (om-make-color 0 0 0) (om-make-font "Geneva" 10 :family "Geneva" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote genfun) "GENERIC-CNSTR" (quote generic-cnstr) (quote ((om-load-inputfun (quote input-funbox) "constraint predicate" "CNSTR" nil) (om-load-inputfun (quote input-funbox) "a list of variable indexes" "VAR-INDS" (list 2 4 7 3 1 7 5 2 0 1 6 0)) (om-load-inputfun (quote input-funbox) "fix, all or step" "OPTION" (list (quote common-lisp-user::s) 3)))) (om-make-point 9 106) nil nil nil nil 1) (om-load-boxcall (quote genfun) "VARIABLE-DOMAINS" (quote variable-domains) (quote ((om-load-inputfun (quote input-funbox) "list of values in each variable domain" "DOMAINS" (list (list 1 2) (list 3 4))))) (om-make-point 499 166) (om-make-point 101 45) nil nil nil 1))) (quote ((32 0 0 4 nil 0) (43 0 0 6 nil 0) (2 0 1 4 nil 0) (6 1 4 0 nil 0) (6 0 5 1 nil 0) (11 0 5 2 nil 0) (4 0 5 3 nil 0) (0 0 6 0 nil 0) (27 0 7 0 nil 0) (15 0 7 1 nil 0) (30 0 7 2 nil 0) (31 0 7 3 nil 0) (14 0 7 4 nil 0) (13 0 7 5 nil 0) (29 0 7 6 nil 0) (28 0 7 7 nil 0) (1 0 11 0 nil 0) (10 0 21 0 nil 0) (42 0 32 0 nil 0) (36 0 32 1 nil 0) (21 0 32 2 nil 0) (9 0 36 0 nil 0) (8 0 42 0 nil 0) (7 0 43 0 nil 0))) nil 6.030006))
